# coding: utf-8

"""
    License Management System

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.activation_status import ActivationStatus
from typing import Optional, Set
from typing_extensions import Self

class ActivationResponse(BaseModel):
    """
    ActivationResponse
    """ # noqa: E501
    id: StrictInt
    license_key_id: StrictInt
    machine_id: StrictStr
    machine_name: Optional[StrictStr]
    ip_address: Optional[StrictStr]
    status: ActivationStatus
    activated_at: datetime
    last_heartbeat: datetime
    __properties: ClassVar[List[str]] = ["id", "license_key_id", "machine_id", "machine_name", "ip_address", "status", "activated_at", "last_heartbeat"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ActivationResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # set to None if machine_name (nullable) is None
        # and model_fields_set contains the field
        if self.machine_name is None and "machine_name" in self.model_fields_set:
            _dict['machine_name'] = None

        # set to None if ip_address (nullable) is None
        # and model_fields_set contains the field
        if self.ip_address is None and "ip_address" in self.model_fields_set:
            _dict['ip_address'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ActivationResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "license_key_id": obj.get("license_key_id"),
            "machine_id": obj.get("machine_id"),
            "machine_name": obj.get("machine_name"),
            "ip_address": obj.get("ip_address"),
            "status": obj.get("status"),
            "activated_at": obj.get("activated_at"),
            "last_heartbeat": obj.get("last_heartbeat")
        })
        return _obj


