#!/usr/bin/env python3
"""
Product Registration and Feature Restriction Example

This example demonstrates how to:
1. Register your application with the license server
2. Use license validation to restrict features
3. Implement feature-based access control

IMPORTANT: Before running this example:
1. Make sure the license server is running on http://localhost:8999
2. Replace "YOUR-ACTUAL-LICENSE-KEY-HERE" with a real license key from your stored keys
3. The license key should be one that was generated by the sample data script
"""
import sys
from pathlib import Path

# Add the root project directory to Python path
sys.path.append(str(Path(__file__).parent.parent.parent))

from client_sdk.license_client import LicenseClient, FeatureManager, FeatureNotEnabledError

class MyApplication:
    """Example application that uses license-based feature restrictions"""
    
    def __init__(self, license_key: str = None):
        """
        Initialize the application with enhanced license management
        
        Args:
            license_key: Optional license key for testing
        """
        # Initialize the enhanced license client
        self.license_client = LicenseClient(
            server_url="http://localhost:8999",
            app_name="MyAwesomeApp",
            app_version="1.0.0"
        )
        
        # Initialize the feature manager
        self.feature_manager = FeatureManager(self.license_client)
        
        # Set the license key if provided
        if license_key:
            self.feature_manager.set_license_key(license_key)
        
        # Register the application with the server
        self._register_application()
        
        # Show enhanced client info
        print(f"üîß Enhanced License Client initialized:")
        print(f"   App: {self.license_client.app_name} v{self.license_client.app_version}")
        print(f"   Server: {self.license_client.server_url}")
        print(f"   Machine ID: {self.license_client.machine_id[:16]}...")
        print()
    
    def _register_application(self):
        """Register the application with the license server"""
        try:
            # Define available features for this application
            available_features = {
                "basic_editing": True,      # Always available
                "advanced_editing": False,   # Requires license
                "file_export": False,        # Requires license
                "cloud_sync": False,         # Requires license
                "team_collaboration": False, # Requires license
                "premium_support": False,    # Requires license
                "custom_themes": False,      # Requires license
                "api_access": False          # Requires license
            }
            
            # Try to register the application
            try:
                app_info = self.license_client.register_application(
                    description="A powerful text editor with advanced features",
                    features=available_features
                )
                print(f"‚úÖ Application registered successfully!")
                print(f"   App ID: {app_info['id']}")
                print(f"   Name: {app_info['name']}")
                print(f"   Version: {app_info['version']}")
                print()
            except Exception as e:
                if "already exists" in str(e).lower() or "duplicate" in str(e).lower():
                    print(f"‚úÖ Application already registered: {self.app_name} v{self.app_version}")
                    print("   Continuing with existing registration...")
                    print()
                else:
                    raise e
            
        except Exception as e:
            print(f"‚ö†Ô∏è  Application registration failed: {e}")
            print("   Continuing with limited functionality...")
            print()
    
    def set_license_key(self, license_key: str):
        """
        Set the license key for the application
        
        Args:
            license_key: The license key to use
        """
        try:
            self.feature_manager.set_license_key(license_key)
            
            # Validate the license
            license_info = self.license_client.validate_license(license_key)
            
            print(f"‚úÖ License validated successfully!")
            print(f"   Status: {license_info.status.value}")
            print(f"   Expires: {license_info.expires_at or 'Never'}")
            print(f"   Remaining Activations: {license_info.remaining_activations}")
            print(f"   Features: {license_info.features}")
            print()
            
        except Exception as e:
            error_msg = str(e).lower()
            if "not found" in error_msg:
                print(f"‚ùå License key not found: {license_key}")
                print("   Make sure you're using a valid license key from your stored keys")
            elif "already activated" in error_msg or "max activations" in error_msg:
                print(f"‚ùå License already activated on another machine")
                print("   This license has reached its maximum activation limit")
            elif "expired" in error_msg:
                print(f"‚ùå License has expired")
            elif "invalid" in error_msg:
                print(f"‚ùå Invalid license key format")
            else:
                print(f"‚ùå License validation failed: {e}")
            print("   Application will run in demo mode")
            print()
    
    def show_available_features(self):
        """Show which features are available"""
        enabled_features = self.feature_manager.get_enabled_features()
        disabled_features = self.feature_manager.get_disabled_features()
        
        print("üìã Available Features:")
        print("   Enabled:")
        for feature in enabled_features:
            print(f"     ‚úÖ {feature}")
        
        print("   Disabled:")
        for feature in disabled_features:
            print(f"     ‚ùå {feature}")
        print()
    
    # Feature-restricted methods using decorators
    
    @property
    def basic_editing_enabled(self):
        """Check if basic editing is enabled"""
        return self.feature_manager.is_feature_enabled("basic_editing")
    
    @property
    def advanced_editing_enabled(self):
        """Check if advanced editing is enabled"""
        return self.feature_manager.is_feature_enabled("advanced_editing")
    
    @property
    def file_export_enabled(self):
        """Check if file export is enabled"""
        return self.feature_manager.is_feature_enabled("file_export")
    
    @property
    def cloud_sync_enabled(self):
        """Check if cloud sync is enabled"""
        return self.feature_manager.is_feature_enabled("cloud_sync")
    
    @property
    def team_collaboration_enabled(self):
        """Check if team collaboration is enabled"""
        return self.feature_manager.is_feature_enabled("team_collaboration")
    
    @property
    def premium_support_enabled(self):
        """Check if premium support is enabled"""
        return self.feature_manager.is_feature_enabled("premium_support")
    
    @property
    def custom_themes_enabled(self):
        """Check if custom themes are enabled"""
        return self.feature_manager.is_feature_enabled("custom_themes")
    
    @property
    def api_access_enabled(self):
        """Check if API access is enabled"""
        return self.feature_manager.is_feature_enabled("api_access")
    
    # Feature-restricted methods
    
    def edit_text(self, text: str):
        """Basic text editing (always available)"""
        if self.basic_editing_enabled:
            print(f"üìù Editing text: {text}")
            return f"Edited: {text}"
        else:
            print("‚ùå Basic editing not available")
            return None
    
    def advanced_edit_text(self, text: str):
        """Advanced text editing (requires license)"""
        if not self.advanced_editing_enabled:
            raise FeatureNotEnabledError("Advanced editing requires a valid license")
        
        print(f"üîß Advanced editing: {text}")
        return f"Advanced edited: {text.upper()}"
    
    def export_file(self, filename: str, content: str):
        """Export file (requires license)"""
        if not self.file_export_enabled:
            raise FeatureNotEnabledError("File export requires a valid license")
        
        print(f"üíæ Exporting file: {filename}")
        return f"Exported: {filename}"
    
    def sync_to_cloud(self, data: str):
        """Sync to cloud (requires license)"""
        if not self.cloud_sync_enabled:
            raise FeatureNotEnabledError("Cloud sync requires a valid license")
        
        print(f"‚òÅÔ∏è  Syncing to cloud: {data}")
        return f"Synced: {data}"
    
    def collaborate_with_team(self, message: str):
        """Team collaboration (requires license)"""
        if not self.team_collaboration_enabled:
            raise FeatureNotEnabledError("Team collaboration requires a valid license")
        
        print(f"üë• Team collaboration: {message}")
        return f"Shared: {message}"
    
    def get_premium_support(self, issue: str):
        """Premium support (requires license)"""
        if not self.premium_support_enabled:
            raise FeatureNotEnabledError("Premium support requires a valid license")
        
        print(f"üéß Premium support: {issue}")
        return f"Support ticket: {issue}"
    
    def apply_custom_theme(self, theme_name: str):
        """Apply custom theme (requires license)"""
        if not self.custom_themes_enabled:
            raise FeatureNotEnabledError("Custom themes require a valid license")
        
        print(f"üé® Applying theme: {theme_name}")
        return f"Theme applied: {theme_name}"
    
    def access_api(self, endpoint: str):
        """API access (requires license)"""
        if not self.api_access_enabled:
            raise FeatureNotEnabledError("API access requires a valid license")
        
        print(f"üîå API access: {endpoint}")
        return f"API response: {endpoint}"
    
    def demo_mode(self):
        """Run in demo mode with limited features"""
        print("üéÆ Demo Mode - Limited Features Available")
        print("=" * 50)
        
        # Basic editing (always available)
        self.edit_text("Hello World")
        
        # Try advanced features (will fail)
        try:
            self.advanced_edit_text("Advanced text")
        except FeatureNotEnabledError as e:
            print(f"   {e}")
        
        try:
            self.export_file("demo.txt", "content")
        except FeatureNotEnabledError as e:
            print(f"   {e}")
        
        try:
            self.sync_to_cloud("demo data")
        except FeatureNotEnabledError as e:
            print(f"   {e}")
        
        print("=" * 50)
    
    def full_mode(self):
        """Run with full license features"""
        print("üöÄ Full Mode - All Features Available")
        print("=" * 50)
        
        # All features should work
        self.edit_text("Hello World")
        self.advanced_edit_text("Advanced text")
        self.export_file("full.txt", "content")
        self.sync_to_cloud("full data")
        self.collaborate_with_team("Team message")
        self.get_premium_support("Technical issue")
        self.apply_custom_theme("Dark Theme")
        self.access_api("/api/v1/data")
        
        print("=" * 50)

def main():
    """Main example function"""
    print("üéØ Product Registration and Feature Restriction Example")
    print("=" * 60)
    
    # Example 1: Demo mode (no license)
    print("\n Demo Mode (No License)")
    print("-" * 30)
    
    app_demo = MyApplication()
    app_demo.show_available_features()
    app_demo.demo_mode()
    
    # Example 2: Full mode (with license)
    print("\n2Ô∏è‚É£ Full Mode (With License)")
    print("-" * 30)
    
    # Use one of the sample license keys
    sample_license = "NVA1U-6AMFO-N50AZ-GXRZP-TYLTQ"  # From sample data
    
    app_full = MyApplication(license_key=sample_license)
    app_full.show_available_features()
    app_full.full_mode()
    
    # Example 3: Feature checking
    print("\n3Ô∏è‚É£ Feature Checking Examples")
    print("-" * 30)
    
    print("Checking individual features:")
    print(f"   Basic editing: {app_full.basic_editing_enabled}")
    print(f"   Advanced editing: {app_full.advanced_editing_enabled}")
    print(f"   File export: {app_full.file_export_enabled}")
    print(f"   Cloud sync: {app_full.cloud_sync_enabled}")
    print(f"   Team collaboration: {app_full.team_collaboration_enabled}")
    print(f"   Premium support: {app_full.premium_support_enabled}")
    print(f"   Custom themes: {app_full.custom_themes_enabled}")
    print(f"   API access: {app_full.api_access_enabled}")
    
    print("\n‚úÖ Example completed!")

if __name__ == "__main__":
    main() 